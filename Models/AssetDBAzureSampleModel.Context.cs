//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssetDBWebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AssetDBAzureSampleEntities : DbContext
    {
        public AssetDBAzureSampleEntities()
            : base("name=AssetDBAzureSampleEntities")
        {
            Configuration.ProxyCreationEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<AssetRelationship> AssetRelationships { get; set; }
        public virtual DbSet<AssetSubType> AssetSubTypes { get; set; }
        public virtual DbSet<AssetSubTypeProperty> AssetSubTypeProperties { get; set; }
        public virtual DbSet<AssetSubTypePropertyValue> AssetSubTypePropertyValues { get; set; }
        public virtual DbSet<AssetSubTypePropertyValueLookup> AssetSubTypePropertyValueLookups { get; set; }
        public virtual DbSet<AssetType> AssetTypes { get; set; }
        public virtual DbSet<AssetTypeProperty> AssetTypeProperties { get; set; }
        public virtual DbSet<AssetTypePropertyValue> AssetTypePropertyValues { get; set; }
        public virtual DbSet<AssetTypePropertyValueLookup> AssetTypePropertyValueLookups { get; set; }
        public virtual DbSet<DocumentMimeType> DocumentMimeTypes { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
    
        public virtual int usp_AssetRelationshipDelete(Nullable<int> assetID, Nullable<int> relatedAssetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var relatedAssetIDParameter = relatedAssetID.HasValue ?
                new ObjectParameter("RelatedAssetID", relatedAssetID) :
                new ObjectParameter("RelatedAssetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetRelationshipDelete", assetIDParameter, relatedAssetIDParameter);
        }
    
        public virtual ObjectResult<usp_AssetRelationshipHierarchy_Result> usp_AssetRelationshipHierarchy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssetRelationshipHierarchy_Result>("usp_AssetRelationshipHierarchy");
        }
    
        public virtual ObjectResult<usp_AssetRelationshipHierarchyChild_Result> usp_AssetRelationshipHierarchyChild(Nullable<int> parentID, Nullable<int> assetID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("assetID", assetID) :
                new ObjectParameter("assetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssetRelationshipHierarchyChild_Result>("usp_AssetRelationshipHierarchyChild", parentIDParameter, assetIDParameter);
        }
    
        public virtual ObjectResult<usp_AssetRelationshipHierarchyParent_Result> usp_AssetRelationshipHierarchyParent(Nullable<int> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssetRelationshipHierarchyParent_Result>("usp_AssetRelationshipHierarchyParent", assetIDParameter);
        }
    
        public virtual int usp_AssetRelationshipInsert(Nullable<int> assetID, Nullable<int> relatedAssetID, Nullable<bool> relationship)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var relatedAssetIDParameter = relatedAssetID.HasValue ?
                new ObjectParameter("RelatedAssetID", relatedAssetID) :
                new ObjectParameter("RelatedAssetID", typeof(int));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetRelationshipInsert", assetIDParameter, relatedAssetIDParameter, relationshipParameter);
        }
    
        public virtual ObjectResult<usp_AssetRelationshipSelect_Result> usp_AssetRelationshipSelect(Nullable<int> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssetRelationshipSelect_Result>("usp_AssetRelationshipSelect", assetIDParameter);
        }
    
        public virtual int usp_AssetRelationshipUpdate(Nullable<int> assetID, Nullable<int> relatedAssetID, Nullable<bool> relationship)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var relatedAssetIDParameter = relatedAssetID.HasValue ?
                new ObjectParameter("RelatedAssetID", relatedAssetID) :
                new ObjectParameter("RelatedAssetID", typeof(int));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetRelationshipUpdate", assetIDParameter, relatedAssetIDParameter, relationshipParameter);
        }
    
        public virtual int usp_AssetSubTypePropertyValueLookupDelete(Nullable<int> lookupID)
        {
            var lookupIDParameter = lookupID.HasValue ?
                new ObjectParameter("LookupID", lookupID) :
                new ObjectParameter("LookupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetSubTypePropertyValueLookupDelete", lookupIDParameter);
        }
    
        public virtual int usp_AssetSubTypePropertyValueLookupInsert(Nullable<int> propertySubType, string lookupValue)
        {
            var propertySubTypeParameter = propertySubType.HasValue ?
                new ObjectParameter("PropertySubType", propertySubType) :
                new ObjectParameter("PropertySubType", typeof(int));
    
            var lookupValueParameter = lookupValue != null ?
                new ObjectParameter("LookupValue", lookupValue) :
                new ObjectParameter("LookupValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetSubTypePropertyValueLookupInsert", propertySubTypeParameter, lookupValueParameter);
        }
    
        public virtual ObjectResult<usp_AssetSubTypePropertyValueLookupSelect_Result> usp_AssetSubTypePropertyValueLookupSelect(Nullable<int> propertySubType)
        {
            var propertySubTypeParameter = propertySubType.HasValue ?
                new ObjectParameter("PropertySubType", propertySubType) :
                new ObjectParameter("PropertySubType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssetSubTypePropertyValueLookupSelect_Result>("usp_AssetSubTypePropertyValueLookupSelect", propertySubTypeParameter);
        }
    
        public virtual int usp_AssetSubTypePropertyValueLookupUpdate(Nullable<int> lookupID, Nullable<int> propertySubType, string lookupValue)
        {
            var lookupIDParameter = lookupID.HasValue ?
                new ObjectParameter("LookupID", lookupID) :
                new ObjectParameter("LookupID", typeof(int));
    
            var propertySubTypeParameter = propertySubType.HasValue ?
                new ObjectParameter("PropertySubType", propertySubType) :
                new ObjectParameter("PropertySubType", typeof(int));
    
            var lookupValueParameter = lookupValue != null ?
                new ObjectParameter("LookupValue", lookupValue) :
                new ObjectParameter("LookupValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetSubTypePropertyValueLookupUpdate", lookupIDParameter, propertySubTypeParameter, lookupValueParameter);
        }
    
        public virtual int usp_AssetTypePropertyValueLookupDelete(Nullable<int> lookupID)
        {
            var lookupIDParameter = lookupID.HasValue ?
                new ObjectParameter("LookupID", lookupID) :
                new ObjectParameter("LookupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetTypePropertyValueLookupDelete", lookupIDParameter);
        }
    
        public virtual int usp_AssetTypePropertyValueLookupInsert(Nullable<int> propertyType, string lookupValue)
        {
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            var lookupValueParameter = lookupValue != null ?
                new ObjectParameter("LookupValue", lookupValue) :
                new ObjectParameter("LookupValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetTypePropertyValueLookupInsert", propertyTypeParameter, lookupValueParameter);
        }
    
        public virtual ObjectResult<usp_AssetTypePropertyValueLookupSelect_Result> usp_AssetTypePropertyValueLookupSelect(Nullable<int> propertyType)
        {
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AssetTypePropertyValueLookupSelect_Result>("usp_AssetTypePropertyValueLookupSelect", propertyTypeParameter);
        }
    
        public virtual int usp_AssetTypePropertyValueLookupUpdate(Nullable<int> lookupID, Nullable<int> propertyType, string lookupValue)
        {
            var lookupIDParameter = lookupID.HasValue ?
                new ObjectParameter("LookupID", lookupID) :
                new ObjectParameter("LookupID", typeof(int));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            var lookupValueParameter = lookupValue != null ?
                new ObjectParameter("LookupValue", lookupValue) :
                new ObjectParameter("LookupValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AssetTypePropertyValueLookupUpdate", lookupIDParameter, propertyTypeParameter, lookupValueParameter);
        }
    
        public virtual int usp_CreateAsset(Nullable<int> assetType, Nullable<int> assetSubType, string name, string clientID, string labID, string status, string deviceStatus, Nullable<bool> hasAlarm, string alarmMessage, Nullable<System.DateTime> lastServiceDate, Nullable<System.DateTime> nextServiceDate, string notes)
        {
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetSubTypeParameter = assetSubType.HasValue ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var labIDParameter = labID != null ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var deviceStatusParameter = deviceStatus != null ?
                new ObjectParameter("DeviceStatus", deviceStatus) :
                new ObjectParameter("DeviceStatus", typeof(string));
    
            var hasAlarmParameter = hasAlarm.HasValue ?
                new ObjectParameter("HasAlarm", hasAlarm) :
                new ObjectParameter("HasAlarm", typeof(bool));
    
            var alarmMessageParameter = alarmMessage != null ?
                new ObjectParameter("AlarmMessage", alarmMessage) :
                new ObjectParameter("AlarmMessage", typeof(string));
    
            var lastServiceDateParameter = lastServiceDate.HasValue ?
                new ObjectParameter("LastServiceDate", lastServiceDate) :
                new ObjectParameter("LastServiceDate", typeof(System.DateTime));
    
            var nextServiceDateParameter = nextServiceDate.HasValue ?
                new ObjectParameter("NextServiceDate", nextServiceDate) :
                new ObjectParameter("NextServiceDate", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateAsset", assetTypeParameter, assetSubTypeParameter, nameParameter, clientIDParameter, labIDParameter, statusParameter, deviceStatusParameter, hasAlarmParameter, alarmMessageParameter, lastServiceDateParameter, nextServiceDateParameter, notesParameter);
        }
    
        public virtual int usp_CreateAssetSubType(Nullable<int> assetSubTypeID, Nullable<int> assetType, string assetSubType)
        {
            var assetSubTypeIDParameter = assetSubTypeID.HasValue ?
                new ObjectParameter("AssetSubTypeID", assetSubTypeID) :
                new ObjectParameter("AssetSubTypeID", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetSubTypeParameter = assetSubType != null ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateAssetSubType", assetSubTypeIDParameter, assetTypeParameter, assetSubTypeParameter);
        }
    
        public virtual int usp_CreateAssetSubTypeProperty(Nullable<int> assetSubTypePropertyID, Nullable<int> assetSubType, string assetSubTypeProperty)
        {
            var assetSubTypePropertyIDParameter = assetSubTypePropertyID.HasValue ?
                new ObjectParameter("AssetSubTypePropertyID", assetSubTypePropertyID) :
                new ObjectParameter("AssetSubTypePropertyID", typeof(int));
    
            var assetSubTypeParameter = assetSubType.HasValue ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(int));
    
            var assetSubTypePropertyParameter = assetSubTypeProperty != null ?
                new ObjectParameter("AssetSubTypeProperty", assetSubTypeProperty) :
                new ObjectParameter("AssetSubTypeProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateAssetSubTypeProperty", assetSubTypePropertyIDParameter, assetSubTypeParameter, assetSubTypePropertyParameter);
        }
    
        public virtual int usp_CreateAssetType(Nullable<int> assetTypeID, string assetType)
        {
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateAssetType", assetTypeIDParameter, assetTypeParameter);
        }
    
        public virtual int usp_CreateAssetTypeProperty(Nullable<int> assetTypePropertyID, Nullable<int> assetType, string assetTypeProperty)
        {
            var assetTypePropertyIDParameter = assetTypePropertyID.HasValue ?
                new ObjectParameter("AssetTypePropertyID", assetTypePropertyID) :
                new ObjectParameter("AssetTypePropertyID", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetTypePropertyParameter = assetTypeProperty != null ?
                new ObjectParameter("AssetTypeProperty", assetTypeProperty) :
                new ObjectParameter("AssetTypeProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateAssetTypeProperty", assetTypePropertyIDParameter, assetTypeParameter, assetTypePropertyParameter);
        }
    
        public virtual int usp_DeleteAsset(Nullable<int> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAsset", assetIDParameter);
        }
    
        public virtual int usp_DeleteAssetSubType(Nullable<int> assetSubTypeID, Nullable<int> assetType, string assetSubType)
        {
            var assetSubTypeIDParameter = assetSubTypeID.HasValue ?
                new ObjectParameter("AssetSubTypeID", assetSubTypeID) :
                new ObjectParameter("AssetSubTypeID", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetSubTypeParameter = assetSubType != null ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAssetSubType", assetSubTypeIDParameter, assetTypeParameter, assetSubTypeParameter);
        }
    
        public virtual int usp_DeleteAssetSubTypeProperty(Nullable<int> assetSubTypePropertyID, Nullable<int> assetSubType, string assetSubTypeProperty)
        {
            var assetSubTypePropertyIDParameter = assetSubTypePropertyID.HasValue ?
                new ObjectParameter("AssetSubTypePropertyID", assetSubTypePropertyID) :
                new ObjectParameter("AssetSubTypePropertyID", typeof(int));
    
            var assetSubTypeParameter = assetSubType.HasValue ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(int));
    
            var assetSubTypePropertyParameter = assetSubTypeProperty != null ?
                new ObjectParameter("AssetSubTypeProperty", assetSubTypeProperty) :
                new ObjectParameter("AssetSubTypeProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAssetSubTypeProperty", assetSubTypePropertyIDParameter, assetSubTypeParameter, assetSubTypePropertyParameter);
        }
    
        public virtual int usp_DeleteAssetType(Nullable<int> assetTypeID, string assetType)
        {
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAssetType", assetTypeIDParameter, assetTypeParameter);
        }
    
        public virtual int usp_DeleteAssetTypeProperty(Nullable<int> assetTypePropertyID, Nullable<int> assetType, string assetTypeProperty)
        {
            var assetTypePropertyIDParameter = assetTypePropertyID.HasValue ?
                new ObjectParameter("AssetTypePropertyID", assetTypePropertyID) :
                new ObjectParameter("AssetTypePropertyID", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetTypePropertyParameter = assetTypeProperty != null ?
                new ObjectParameter("AssetTypeProperty", assetTypeProperty) :
                new ObjectParameter("AssetTypeProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAssetTypeProperty", assetTypePropertyIDParameter, assetTypeParameter, assetTypePropertyParameter);
        }
    
        public virtual ObjectResult<usp_DocumentCheck_Result> usp_DocumentCheck(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentCheck_Result>("usp_DocumentCheck", iDParameter);
        }
    
        public virtual ObjectResult<string> usp_DocumentMimeTypesSelect(string extension)
        {
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DocumentMimeTypesSelect", extensionParameter);
        }
    
        public virtual ObjectResult<usp_DocumentOpen_Result> usp_DocumentOpen(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentOpen_Result>("usp_DocumentOpen", iDParameter);
        }
    
        public virtual int usp_DocumentsDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentsDelete", iDParameter);
        }
    
        public virtual int usp_DocumentsInsert(Nullable<int> assetID, string title, string extension, byte[] data, Nullable<int> contentLength)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(byte[]));
    
            var contentLengthParameter = contentLength.HasValue ?
                new ObjectParameter("ContentLength", contentLength) :
                new ObjectParameter("ContentLength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentsInsert", assetIDParameter, titleParameter, extensionParameter, dataParameter, contentLengthParameter);
        }
    
        public virtual ObjectResult<usp_DocumentsSelect_Result> usp_DocumentsSelect(Nullable<int> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DocumentsSelect_Result>("usp_DocumentsSelect", assetIDParameter);
        }
    
        public virtual int usp_DocumentsUpdate(Nullable<int> iD, Nullable<int> assetID, string title, Nullable<System.DateTime> dateUploaded, string extension, byte[] data)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dateUploadedParameter = dateUploaded.HasValue ?
                new ObjectParameter("DateUploaded", dateUploaded) :
                new ObjectParameter("DateUploaded", typeof(System.DateTime));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DocumentsUpdate", iDParameter, assetIDParameter, titleParameter, dateUploadedParameter, extensionParameter, dataParameter);
        }
    
        public virtual ObjectResult<usp_GetAsset_Result> usp_GetAsset(Nullable<int> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAsset_Result>("usp_GetAsset", assetIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssets_Result> usp_GetAssets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssets_Result>("usp_GetAssets");
        }
    
        public virtual ObjectResult<usp_GetAssetSubType_Result> usp_GetAssetSubType(Nullable<int> assetType)
        {
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetSubType_Result>("usp_GetAssetSubType", assetTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetAssetSubTypeProperty_Result> usp_GetAssetSubTypeProperty(Nullable<int> assetSubType)
        {
            var assetSubTypeParameter = assetSubType.HasValue ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetSubTypeProperty_Result>("usp_GetAssetSubTypeProperty", assetSubTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetAssetSubTypeValues_Result> usp_GetAssetSubTypeValues(Nullable<int> asset)
        {
            var assetParameter = asset.HasValue ?
                new ObjectParameter("Asset", asset) :
                new ObjectParameter("Asset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetSubTypeValues_Result>("usp_GetAssetSubTypeValues", assetParameter);
        }
    
        public virtual ObjectResult<usp_GetAssetType_Result> usp_GetAssetType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetType_Result>("usp_GetAssetType");
        }
    
        public virtual ObjectResult<usp_GetAssetTypeProperty_Result> usp_GetAssetTypeProperty(Nullable<int> assetType)
        {
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetTypeProperty_Result>("usp_GetAssetTypeProperty", assetTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetAssetTypeValues_Result> usp_GetAssetTypeValues(Nullable<int> asset)
        {
            var assetParameter = asset.HasValue ?
                new ObjectParameter("Asset", asset) :
                new ObjectParameter("Asset", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetTypeValues_Result>("usp_GetAssetTypeValues", assetParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_GetLastAssetID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_GetLastAssetID");
        }
    
        public virtual ObjectResult<string> usp_GetSubTypeLookupValues(Nullable<int> propertySubType, string prefixText)
        {
            var propertySubTypeParameter = propertySubType.HasValue ?
                new ObjectParameter("PropertySubType", propertySubType) :
                new ObjectParameter("PropertySubType", typeof(int));
    
            var prefixTextParameter = prefixText != null ?
                new ObjectParameter("prefixText", prefixText) :
                new ObjectParameter("prefixText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetSubTypeLookupValues", propertySubTypeParameter, prefixTextParameter);
        }
    
        public virtual ObjectResult<string> usp_GetTypeLookupValues(Nullable<int> propertyType, string prefixText)
        {
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            var prefixTextParameter = prefixText != null ?
                new ObjectParameter("prefixText", prefixText) :
                new ObjectParameter("prefixText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetTypeLookupValues", propertyTypeParameter, prefixTextParameter);
        }
    
        public virtual ObjectResult<usp_LookupAssetSubType_Result> usp_LookupAssetSubType(Nullable<int> assetType)
        {
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LookupAssetSubType_Result>("usp_LookupAssetSubType", assetTypeParameter);
        }
    
        public virtual ObjectResult<string> usp_LookupAssetSubTypebyName(string assetType)
        {
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_LookupAssetSubTypebyName", assetTypeParameter);
        }
    
        public virtual ObjectResult<usp_LookupAssetType_Result> usp_LookupAssetType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LookupAssetType_Result>("usp_LookupAssetType");
        }
    
        public virtual ObjectResult<string> usp_LookupDDLTypeValues(Nullable<int> propertyType)
        {
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_LookupDDLTypeValues", propertyTypeParameter);
        }
    
        public virtual int usp_OrderDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDelete", iDParameter);
        }
    
        public virtual ObjectResult<string> usp_OrderHardwareTypeLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_OrderHardwareTypeLookup");
        }
    
        public virtual int usp_OrderInsert(string orderType, string purchaseOrderNo, string requisitionNo, string status, string supplier, string callReference, string costCode, string invoiceNo, Nullable<System.DateTime> orderDate)
        {
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var requisitionNoParameter = requisitionNo != null ?
                new ObjectParameter("RequisitionNo", requisitionNo) :
                new ObjectParameter("RequisitionNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var callReferenceParameter = callReference != null ?
                new ObjectParameter("CallReference", callReference) :
                new ObjectParameter("CallReference", typeof(string));
    
            var costCodeParameter = costCode != null ?
                new ObjectParameter("CostCode", costCode) :
                new ObjectParameter("CostCode", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderInsert", orderTypeParameter, purchaseOrderNoParameter, requisitionNoParameter, statusParameter, supplierParameter, callReferenceParameter, costCodeParameter, invoiceNoParameter, orderDateParameter);
        }
    
        public virtual int usp_OrderItemsDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderItemsDelete", iDParameter);
        }
    
        public virtual int usp_OrderItemsInsert(Nullable<int> orderID, string type, string makeOrPublisher, string modelOrTitle, string version, Nullable<int> quantity, Nullable<decimal> value, string status)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var makeOrPublisherParameter = makeOrPublisher != null ?
                new ObjectParameter("MakeOrPublisher", makeOrPublisher) :
                new ObjectParameter("MakeOrPublisher", typeof(string));
    
            var modelOrTitleParameter = modelOrTitle != null ?
                new ObjectParameter("ModelOrTitle", modelOrTitle) :
                new ObjectParameter("ModelOrTitle", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderItemsInsert", orderIDParameter, typeParameter, makeOrPublisherParameter, modelOrTitleParameter, versionParameter, quantityParameter, valueParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_OrderItemsSelect_Result> usp_OrderItemsSelect(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrderItemsSelect_Result>("usp_OrderItemsSelect", iDParameter);
        }
    
        public virtual int usp_OrderItemsUpdate(Nullable<int> iD, Nullable<int> orderID, string type, string makeOrPublisher, string modelOrTitle, string version, Nullable<int> quantity, Nullable<decimal> value, string status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var makeOrPublisherParameter = makeOrPublisher != null ?
                new ObjectParameter("MakeOrPublisher", makeOrPublisher) :
                new ObjectParameter("MakeOrPublisher", typeof(string));
    
            var modelOrTitleParameter = modelOrTitle != null ?
                new ObjectParameter("ModelOrTitle", modelOrTitle) :
                new ObjectParameter("ModelOrTitle", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderItemsUpdate", iDParameter, orderIDParameter, typeParameter, makeOrPublisherParameter, modelOrTitleParameter, versionParameter, quantityParameter, valueParameter, statusParameter);
        }
    
        public virtual ObjectResult<usp_OrderSelect_Result> usp_OrderSelect(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrderSelect_Result>("usp_OrderSelect", iDParameter);
        }
    
        public virtual ObjectResult<usp_OrderSelectAll_Result> usp_OrderSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrderSelectAll_Result>("usp_OrderSelectAll");
        }
    
        public virtual int usp_OrderUpdate(Nullable<int> iD, string orderType, string purchaseOrderNo, string requisitionNo, string status, string supplier, string callReference, string costCode, string invoiceNo, Nullable<System.DateTime> orderDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var requisitionNoParameter = requisitionNo != null ?
                new ObjectParameter("RequisitionNo", requisitionNo) :
                new ObjectParameter("RequisitionNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var callReferenceParameter = callReference != null ?
                new ObjectParameter("CallReference", callReference) :
                new ObjectParameter("CallReference", typeof(string));
    
            var costCodeParameter = costCode != null ?
                new ObjectParameter("CostCode", costCode) :
                new ObjectParameter("CostCode", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderUpdate", iDParameter, orderTypeParameter, purchaseOrderNoParameter, requisitionNoParameter, statusParameter, supplierParameter, callReferenceParameter, costCodeParameter, invoiceNoParameter, orderDateParameter);
        }
    
        public virtual int usp_UpdateAsset(Nullable<int> assetID, Nullable<int> assetType, Nullable<int> assetSubType, string name, string clientID, string labID, string status, string deviceStatus, Nullable<bool> hasAlarm, string alarmMessage, Nullable<System.DateTime> lastServiceDate, Nullable<System.DateTime> nextServiceDate, string notes)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetSubTypeParameter = assetSubType.HasValue ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var labIDParameter = labID != null ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var deviceStatusParameter = deviceStatus != null ?
                new ObjectParameter("DeviceStatus", deviceStatus) :
                new ObjectParameter("DeviceStatus", typeof(string));
    
            var hasAlarmParameter = hasAlarm.HasValue ?
                new ObjectParameter("HasAlarm", hasAlarm) :
                new ObjectParameter("HasAlarm", typeof(bool));
    
            var alarmMessageParameter = alarmMessage != null ?
                new ObjectParameter("AlarmMessage", alarmMessage) :
                new ObjectParameter("AlarmMessage", typeof(string));
    
            var lastServiceDateParameter = lastServiceDate.HasValue ?
                new ObjectParameter("LastServiceDate", lastServiceDate) :
                new ObjectParameter("LastServiceDate", typeof(System.DateTime));
    
            var nextServiceDateParameter = nextServiceDate.HasValue ?
                new ObjectParameter("NextServiceDate", nextServiceDate) :
                new ObjectParameter("NextServiceDate", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAsset", assetIDParameter, assetTypeParameter, assetSubTypeParameter, nameParameter, clientIDParameter, labIDParameter, statusParameter, deviceStatusParameter, hasAlarmParameter, alarmMessageParameter, lastServiceDateParameter, nextServiceDateParameter, notesParameter);
        }
    
        public virtual int usp_UpdateAssetSubType(Nullable<int> assetSubTypeID, Nullable<int> assetType, string assetSubType)
        {
            var assetSubTypeIDParameter = assetSubTypeID.HasValue ?
                new ObjectParameter("AssetSubTypeID", assetSubTypeID) :
                new ObjectParameter("AssetSubTypeID", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetSubTypeParameter = assetSubType != null ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssetSubType", assetSubTypeIDParameter, assetTypeParameter, assetSubTypeParameter);
        }
    
        public virtual int usp_UpdateAssetSubTypeProperty(Nullable<int> assetSubTypePropertyID, Nullable<int> assetSubType, string assetSubTypeProperty)
        {
            var assetSubTypePropertyIDParameter = assetSubTypePropertyID.HasValue ?
                new ObjectParameter("AssetSubTypePropertyID", assetSubTypePropertyID) :
                new ObjectParameter("AssetSubTypePropertyID", typeof(int));
    
            var assetSubTypeParameter = assetSubType.HasValue ?
                new ObjectParameter("AssetSubType", assetSubType) :
                new ObjectParameter("AssetSubType", typeof(int));
    
            var assetSubTypePropertyParameter = assetSubTypeProperty != null ?
                new ObjectParameter("AssetSubTypeProperty", assetSubTypeProperty) :
                new ObjectParameter("AssetSubTypeProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssetSubTypeProperty", assetSubTypePropertyIDParameter, assetSubTypeParameter, assetSubTypePropertyParameter);
        }
    
        public virtual int usp_UpdateAssetSubTypeValues(Nullable<int> assetSubTypePropertyValueID, string assetSubTypePropertyValue)
        {
            var assetSubTypePropertyValueIDParameter = assetSubTypePropertyValueID.HasValue ?
                new ObjectParameter("AssetSubTypePropertyValueID", assetSubTypePropertyValueID) :
                new ObjectParameter("AssetSubTypePropertyValueID", typeof(int));
    
            var assetSubTypePropertyValueParameter = assetSubTypePropertyValue != null ?
                new ObjectParameter("AssetSubTypePropertyValue", assetSubTypePropertyValue) :
                new ObjectParameter("AssetSubTypePropertyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssetSubTypeValues", assetSubTypePropertyValueIDParameter, assetSubTypePropertyValueParameter);
        }
    
        public virtual int usp_UpdateAssetType(Nullable<int> assetTypeID, string assetType)
        {
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var assetTypeParameter = assetType != null ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssetType", assetTypeIDParameter, assetTypeParameter);
        }
    
        public virtual int usp_UpdateAssetTypeProperty(Nullable<int> assetTypePropertyID, Nullable<int> assetType, string assetTypeProperty)
        {
            var assetTypePropertyIDParameter = assetTypePropertyID.HasValue ?
                new ObjectParameter("AssetTypePropertyID", assetTypePropertyID) :
                new ObjectParameter("AssetTypePropertyID", typeof(int));
    
            var assetTypeParameter = assetType.HasValue ?
                new ObjectParameter("AssetType", assetType) :
                new ObjectParameter("AssetType", typeof(int));
    
            var assetTypePropertyParameter = assetTypeProperty != null ?
                new ObjectParameter("AssetTypeProperty", assetTypeProperty) :
                new ObjectParameter("AssetTypeProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssetTypeProperty", assetTypePropertyIDParameter, assetTypeParameter, assetTypePropertyParameter);
        }
    
        public virtual int usp_UpdateAssetTypeValues(Nullable<int> assetTypePropertyValueID, string assetTypePropertyValue)
        {
            var assetTypePropertyValueIDParameter = assetTypePropertyValueID.HasValue ?
                new ObjectParameter("AssetTypePropertyValueID", assetTypePropertyValueID) :
                new ObjectParameter("AssetTypePropertyValueID", typeof(int));
    
            var assetTypePropertyValueParameter = assetTypePropertyValue != null ?
                new ObjectParameter("AssetTypePropertyValue", assetTypePropertyValue) :
                new ObjectParameter("AssetTypePropertyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssetTypeValues", assetTypePropertyValueIDParameter, assetTypePropertyValueParameter);
        }
    }
}
